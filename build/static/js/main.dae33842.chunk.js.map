{"version":3,"sources":["components/displayChart.js","components/dataHandler.js","components/AQIcalculator.js","components/NavBar.js","pages/Home.js","helpers/AQI.js","components/MapView.js","components/Weather-Widget.js","pages/Map.js","components/dashboard.js","pages/DashBoard.js","App.js","index.js"],"names":["thingspeakHandler","require","labels","pm_1_atms","temperatures","humidities","aqis","pm_2_5_atms","pm_10_atms","aqi_descriptions","chartData","inputs","a","sensorids","sensorid","startdate","enddate","console","log","getThingspeakProcessedData","data","forEach","element","sensor_ID","feeds","feed","push","created_at","Temperature","Humidity","AQI","PM25ATM","PM100ATM","PM10ATM","AQIDescription","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","options","responsive","plugins","legend","position","title","display","text","datasets","temperature","color","getColor","backgroundColor","getBackgroundColor","label","borderColor","humidity","aqi","pm_25","pm_1","pm_10","Test","ShowChart","useState","error","setError","isLoaded","setIsLoaded","useEffect","getdata","message","o","Math","round","r","random","replace","fetch","AQICalculator","getSingleSensorData","channel_id","API_key","start_date","end_date","Promise","resolve","reject","url","then","res","json","response","status","Error","singleSensorData","ID","Channel","channel","Feeds","catch","err","getMultipleSensorData","sensor_IDs","multipleSensorsData","purpleairData","schmidtSensorsData","purpleairSchmidtSensorsData","undefined","sensorData","Primary_Channel_ID","Primary_KEY","thisSensorData","processThingspeakData","data_to_process","thingspeakProcessedData","reg","processed","map","el","JSON","parse","stringify","replaceAll","field1","field2","field3","field4","field5","field6","field7","field8","calculatedAQI","aqiFromPM","parseFloat","getAQIDescription","AQIMessage","getAQIMessage","getThingspeakRawData","pm","isNaN","calcAQI","Cp","Ih","Il","BPh","BPl","b","c","navigation","name","href","current","classNames","classes","filter","Boolean","join","NavBar","as","className","open","src","alt","item","to","Button","icon","Panel","type","features","description","GlobeAltIcon","ScaleIcon","LightningBoltIcon","AnnotationIcon","Home","feature","aqiGradeRGB","all_sensors","showLabelMap","dataArray","sensorKey","hasOwnProperty","sensor","Marker","Latitude","Longitude","Popup","id","Label","MapView","allSensors","north","central","inner","south","rural","sensors","setSensorData","fetchData1","northCountySensorsData","centralCountySensorsData","innerBeltwaySensorsData","southCountySensorsData","ruralTierSensorsData","northCountySensorsMarkers","centralCountySensorsMarkers","innerBeltwaySensorsMarkers","southCountySensorsMarkers","ruralTierSensorsMarkers","avg","sum","sensorID","Object","keys","length","calcAvgAQI","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","LayersControl","Overlay","checked","FeatureGroup","WeatherWidget","resObj","setResObj","result","main","temp","feels_like","weather","charAt","toUpperCase","slice","wind","speed","Map","displayChart","HandleInputForm","setInputs","handleChange","e","oldValues","target","value","handleCheckboxChange","handleSubmit","event","preventDefault","alert","rootElement","document","getElementById","Display","render","onSubmit","method","htmlFor","placeholder","onChange","required","DashBoard","App","path","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.dae33842.chunk.js","sourcesContent":["import { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport React from 'react';\n\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\n// import faker from 'faker';\n// import { render } from \"react-dom\";\n\nvar thingspeakHandler = require('./dataHandler');\n\nconst labels = [];\nconst pm_1_atms = [];\nconst temperatures = [];\nconst humidities = [];\nconst aqis = [];\nconst pm_2_5_atms = [];\nconst pm_10_atms = [];\nconst aqi_descriptions = [];\n\nexport async function chartData(inputs){\n\n    const sensorids = [inputs.sensorid];\n    const startdate = inputs.startdate;\n    const enddate = inputs.enddate;\n\n    console.log(\"received id:\"+ sensorids)\n    const data = await thingspeakHandler.getThingspeakProcessedData(sensorids, startdate, enddate);\n    console.log('DATA: ', data);\n    data.forEach(element => {\n        console.log(\"Feed of:\" + element.sensor_ID + \"Feeds:\" + element.feeds);\n\n        element.feeds.forEach(feed => {\n            labels.push(feed.created_at);\n            temperatures.push(feed.Temperature);\n            humidities.push(feed.Humidity);\n            aqis.push(feed.AQI);\n            pm_2_5_atms.push(feed.PM25ATM);\n            pm_10_atms.push(feed.PM100ATM);\n            pm_1_atms.push(feed.PM10ATM);\n            aqi_descriptions.push(feed.AQIDescription);\n        });\n\n        console.log(\"Humidities\" + humidities)\n        \n    });\n    \n}\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nexport const options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: 'top',\n    },\n    title: {\n      display: true,\n      text: 'Chart.js Data Chart',\n    },\n  },\n};\n\n//const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n\nexport const data = (inputs) => {\n    const data = {\n        labels,\n        datasets: [] \n    };\n\n    if(inputs.temperature) {\n        const color = getColor();\n        const backgroundColor = getBackgroundColor(color);\n        data.datasets.push(\n            {\n                label: 'Temperature',\n                data: temperatures,\n                borderColor: color,\n                backgroundColor: backgroundColor,\n            }\n        )\n    }\n\n    if(inputs.humidity) {\n        const color = getColor();\n        const backgroundColor = getBackgroundColor(color);\n        data.datasets.push(\n            {\n                label: 'Humidity',\n                data: humidities,\n                borderColor: color,\n                backgroundColor: backgroundColor,\n            }\n        )\n    }\n\n    if(inputs.aqi) {\n        const color = getColor();\n        const backgroundColor = getBackgroundColor(color);\n        data.datasets.push(\n            {\n                label: 'AQI (Air Quality Index)',\n                data: aqis,\n                borderColor: color,\n                backgroundColor: backgroundColor,\n            }\n        )\n    }\n\n    if(inputs.pm_25) {\n        const color = getColor();\n        const backgroundColor = getBackgroundColor(color);\n        data.datasets.push(\n            {\n                label: 'PM 2.5 ATM',\n                data: pm_2_5_atms,\n                borderColor: color,\n                backgroundColor: backgroundColor,\n            }\n        )\n    }\n\n    if(inputs.pm_1) {\n        const color = getColor();\n        const backgroundColor = getBackgroundColor(color);\n        data.datasets.push(\n            {\n                label: 'PM 1.0 ATM',\n                data: pm_1_atms,\n                borderColor: color,\n                backgroundColor: backgroundColor,\n            }\n        )\n    }\n\n    if(inputs.pm_10) {\n        const color = getColor();\n        const backgroundColor = getBackgroundColor(color);\n        data.datasets.push(\n            {\n                label: 'PM 10 ATM',\n                data: pm_10_atms,\n                borderColor: color,\n                backgroundColor: backgroundColor,\n            }\n        )\n    }\n\n\n    return data;\n\n}\n\n// export const data = {\n//   labels,\n//   datasets: [\n//     {\n//       label: 'Temperature',\n//       data: temperatures, //labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\n//       borderColor: 'rgb(255, 99, 132)',\n//       backgroundColor: 'rgba(255, 99, 132, 0.5)',\n//     },\n//     {\n//       label: 'AQI',\n//       data: aqis, //labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\n//       borderColor: 'rgb(53, 162, 235)',\n//       backgroundColor: 'rgba(53, 162, 235, 0.5)',\n//     },\n//   ],\n// };\n\nexport function Test() {\n   return <Line options={options} data={data} />;\n}\n\n\n\nexport function ShowChart(inputs){\n\n    console.log(\"Here we are\");\n\n    const [error, setError] = useState(null);   \n    const [isLoaded, setIsLoaded] = useState(false);\n\n    useEffect(() => {\n\n        const getdata = async () => {\n\n            try {\n                await chartData(inputs);\n                setIsLoaded(true);\n            }\n            catch(err) {\n                setError(true);\n            }\n        };\n\n        getdata();\n\n    });\n\n    if (error) {\n\n        return <div>Error: {error.message}</div>;\n\n    } else if (!isLoaded) {\n\n        return <div>Loading...</div>;\n\n    } else {\n\n        return (\n            <div>\n                <Line options={options} data={data(inputs)} />\n            </div>\n        );\n\n    }\n\n}\n\nfunction getColor() {\n\n    var o = Math.round, r = Math.random, s = 255;\n    return 'rgb(' + o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s) + ')';\n\n}\n\nfunction getBackgroundColor(color){\n    return (color.replace(')', '').replace('rgb', 'rgba') + ',0.5)');\n}","//import { aqiFromPM, getAQIDescription, getAQIMessage } from \"./AQIcalculator.js\";\n//import { getUpdatedSensorsData } from \"./purpleairDataHandler.js\";\nvar fetch = require('node-fetch');\nvar AQICalculator = require('./AQIcalculator');\n\n/**\n * This function get the data from thingspeak after retreiving the sensor's channel id and API from\n * purpleair data.\n * @param {*} sensor_IDs: array of sensor ids to retreive the data for. Could be an array of one value \n * @param {*} channel_id: Thingspeak api key for the sensor.\n * @param {*} channel_id : Thingspeak channel id for the sensor.\n * @param {*} start_date: The start date for which to retreive the data. \n * @param {*} end_date: The End date for which to retreive the data. \n * @returns: Returns a Promise. When resolved contains the data retreived for a single sensor. \n */\n\nconst getSingleSensorData = async(sensor_ID, channel_id, API_key, start_date, end_date) =>\n{\n    return new Promise((resolve, reject) => {\n        const url = `https://api.thingspeak.com/channels/${channel_id}/feeds.json?api_key=${API_key}&start=${start_date}&end=${end_date}`;\n        console.log(url)\n        fetch(url).then(res => res.json())\n        .then(response => {\n            //console.log(response)\n            if(response.status) {\n                if(response.status !== 200) {throw new Error(response.message)}\n            }\n \n            const singleSensorData = {\n                ID: sensor_ID,\n                Channel: response.channel,\n                Feeds: response.feeds\n            }\n \n            resolve({\n                error: false,\n                data: singleSensorData\n            })\n \n        })\n        .catch(err => {\n            const singleSensorData = {}\n            reject({\n                error: true,\n                message: err.message,\n                data: singleSensorData\n            })\n        })\n    })\n}\n\n/**\n * This function returns thingspeak data for multiple sensors, a start date and an end date\n * @param {*} sensor_IDs : List of sensors for which to retreive the data\n * @param {*} start_date : The start date for which to retreive the data. \n * @param {*} end_date: The End date for which to retreive the data. \n * @returns : A list of object containing the sensors data.\n */\n \nconst getMultipleSensorData = async(sensor_IDs, start_date, end_date) =>\n{\n    const multipleSensorsData = [];\n    try {\n        // Retreive updated sensor data from purpleair\n        let purpleairData = await fetch('/.netlify/functions/processed');\n        purpleairData = await purpleairData.json();\n        //console.log(\"Data boom bbom\", purpleairData);\n        const purpleairSchmidtSensorsData = await purpleairData.schmidtSensorsData;\n        //console.log(\"Data:\", purpleairSchmidtSensorsData);\n \n        for(let sensor_ID of sensor_IDs) {\n            // Get sensor data from purpleair\n            let sensorData = purpleairSchmidtSensorsData[sensor_ID];\n            if(sensorData !== undefined){\n                console.log(\"Data from getting data:\", sensorData);\n                // Get channel id and api key for the sensor\n                let channel_id = sensorData.Primary_Channel_ID;\n                let API_key = sensorData.Primary_KEY;\n                let thisSensorData = await getSingleSensorData(sensor_ID, channel_id, API_key, start_date, end_date);\n                multipleSensorsData.push(thisSensorData.data);\n            }\n            else {\n                //alert(\"bad sensorid\");\n            }\n            \n        }\n \n    }\n    catch (err){\n        console.log(err.message);\n    }\n \n    return multipleSensorsData;\n \n}\n\n\n/**\n * This function process the data from thingspeak ensuring proper field name\n * @param {*} data_to_process : Raw sensor data to be processed\n * @returns : The processed sensor data\n */\nconst processThingspeakData = (data_to_process) =>\n{\n    const thingspeakProcessedData = [];\n    try {\n        for(let element of data_to_process){\n            // Reprocessing the fields to their correct names indicated in the channels of the data\n            const reg = /[^a-zA-Z\\d:\\u00C0-\\u00FF]/g\n            let processed = element.Feeds.map(el => JSON.parse(JSON.stringify(el)\n                .replaceAll(\"field1\", element.Channel.field1.replace(reg,\"\"))\n                .replaceAll(\"field2\", element.Channel.field2.replace(reg,\"\"))\n                .replaceAll(\"field3\", element.Channel.field3.replace(reg,\"\"))\n                .replaceAll(\"field4\", element.Channel.field4.replace(reg,\"\"))\n                .replaceAll(\"field5\", element.Channel.field5.replace(reg,\"\"))\n                .replaceAll(\"field6\", element.Channel.field6.replace(reg,\"\"))\n                .replaceAll(\"field7\", element.Channel.field7.replace(reg,\"\"))\n                .replaceAll(\"field8\", element.Channel.field8.replace(reg,\"\"))\n            ))\n\n            // Adding AQI values and message to results\n            processed.forEach(el => {\n                let calculatedAQI = AQICalculator.aqiFromPM(parseFloat(el['PM25ATM']));\n                el.AQI = calculatedAQI;\n                el.AQIDescription = AQICalculator.getAQIDescription(calculatedAQI);\n                el.AQIMessage = AQICalculator.getAQIMessage(calculatedAQI);\n            });\n\n            // Save processed data to new array\n            thingspeakProcessedData.push({\n                sensor_ID: element.ID,\n                channel: element.Channel,\n                feeds: processed\n            });\n        \n        }\n    }\n    catch (err) {\n        console.log(err.message);\n    }\n    return thingspeakProcessedData;\n}\n\n// Get the processed data\nexport const getThingspeakProcessedData =  async function(sensor_IDs, start_date, end_date)\n{\n    return processThingspeakData((await getMultipleSensorData(sensor_IDs, start_date, end_date)));\n}\n\n// Get the raw data\nexport const getThingspeakRawData =  async function(sensor_IDs, start_date, end_date)\n{\n    return (await getMultipleSensorData(sensor_IDs, start_date, end_date));\n}\n\n// For testing \n// async function logData()\n// {\n//     const sensor_IDs = [131815, 102898];\n//     console.log(\"testing\", sensor_IDs)\n//     const start_date = \"2021-10-01\";\n//     const end_date = \"2021-11-01\";\n//     //const singleSensorData = (await getThingspeakRawData(sensor_IDs, start_date, end_date))\n//     const singleSensorData = (await getThingspeakProcessedData(sensor_IDs, start_date, end_date))\n//     console.log('Inside load data', singleSensorData);\n//     console.log(JSON.stringify(singleSensorData))\n//     const div = document.createElement('div');\n//     div.innerHTML = `<h2>What we have</h2> <br />${JSON.stringify(singleSensorData)}<br /><br />`;\n//     $('body').append(div);\n// }\n\n// window.onload = logData;\n","/*\nThe AQI is calculated using the EPA’s breakpoints as described in this \nlink: https://aqs.epa.gov/aqsweb/documents/codetables/aqi_breakpoints.html\n\nThe Code bellow is provided by Purple Air \nhere: https://docs.google.com/document/d/15ijz94dXJ-YAZLi9iZ_RaBwrZ4KtYeCy08goGBwnbCU/edit#\n\nFor more information regarding Air Quality Index (AQI),\nVisit: https://www.airnow.gov/aqi/aqi-basics/using-air-quality-index/\nFor Technical information, \nVisit: https://www.airnow.gov/publications/air-quality-index/technical-assistance-document-for-reporting-the-daily-aqi/\n\nThe following calculation reflect the standard AQI calculation provided by the Environmental Protection Agency (EPA)\n\nThis document converts PM2.5ug/m3 to AQI using the functions below:\n \nvar AQI = aqiFromPM(pm25value);\nvar AQIDescription = getAQIDescription(AQI); //A short description of the provided AQI\nvar AQIMessage = getAQIMessage(AQI); // What the provided AQI means (a longer description)\n\n*/\n\n\n// Air quality Index from PM2.5 Measurements\nexport function aqiFromPM(pm) \n{\n    if (isNaN(pm)) return \"-\";\n    if (pm === undefined) return \"-\";\n    if (pm < 0) return pm;\n    if (pm > 1000) return \"-\";\n    /*      \n    Good                           0 - 50         0.0 - 15.0         0.0 – 12.0\n    Moderate                        51 - 100           >15.0 - 40        12.1 – 35.4\n    Unhealthy for Sensitive Groups   101 – 150     >40 – 65          35.5 – 55.4\n    Unhealthy                                 151 – 200         > 65 – 150       55.5 – 150.4\n    Very Unhealthy                    201 – 300 > 150 – 250     150.5 – 250.4\n    Hazardous                                 301 – 400         > 250 – 350     250.5 – 350.4\n    Hazardous                                 401 – 500         > 350 – 500     350.5 – 500\n    */\n    if (pm > 350.5) {\n      return calcAQI(pm, 500, 401, 500, 350.5);\n    } else if (pm > 250.5) {\n      return calcAQI(pm, 400, 301, 350.4, 250.5);\n    } else if (pm > 150.5) {\n      return calcAQI(pm, 300, 201, 250.4, 150.5);\n    } else if (pm > 55.5) {\n      return calcAQI(pm, 200, 151, 150.4, 55.5);\n    } else if (pm > 35.5) {\n      return calcAQI(pm, 150, 101, 55.4, 35.5);\n    } else if (pm > 12.1) {\n      return calcAQI(pm, 100, 51, 35.4, 12.1);\n    } else if (pm >= 0) {\n      return calcAQI(pm, 50, 0, 12, 0);\n    } else {\n      return undefined;\n    }\n}\n\n// Calculates AQI from ozone measurements\n// function aqiFromOzone(ozone) \n// {\n//     if (isNaN(ozone)) return \"-\";\n//     if (ozone === undefined) return \"-\";\n//     if (ozone < 0) return ozone;\n//     if (ozone > 1000) return \"-\";\n//     /*      \n//     Good                           0 - 0.054\n//     Moderate                        0.055 - 0.070\n//     Unhealthy for Sensitive Groups  0.071 - 0.085\n//     Unhealthy                                 0.086 - 0.105 \n//     Very Unhealthy                    0.106 - 0.200\n//     Hazardous                                 0.405 - 0.604        \n//     */\n//     if (ozone > 0.200) {\n//       return calcAQI(ozone, 500, 301, 500, 0.200);\n//     } else if (ozone > 0.106) {\n//       return calcAQI(ozone, 300, 201, 0.200, 0.106);\n//     } else if (ozone > 0.086) {\n//       return calcAQI(ozone, 200, 151, 0.105 , 0.086);\n//     } else if (ozone > 0.071) {\n//       return calcAQI(ozone, 150, 101, 0.085, 0.071);\n//     } else if (ozone > 0.055) {\n//       return calcAQI(ozone, 100, 51, 0.070, 0.055);\n//     } else if (ozone >= 0) {\n//       return calcAQI(ozone, 50, 0, 0.054, 0);\n//     } else {\n//       return undefined;\n//     }\n// }\n  \n// function bplFromPM(pm) \n// {\n//     if (isNaN(pm)) return 0;\n//     if (pm === undefined) return 0;\n//     if (pm < 0) return 0;\n//     /*      \n//           Good                              0 - 50         0.0 - 15.0         0.0 – 12.0\n//     Moderate                        51 - 100           >15.0 - 40        12.1 – 35.4\n//     Unhealthy for Sensitive Groups   101 – 150     >40 – 65          35.5 – 55.4\n//     Unhealthy                                 151 – 200         > 65 – 150       55.5 – 150.4\n//     Very Unhealthy                    201 – 300 > 150 – 250     150.5 – 250.4\n//     Hazardous                                 301 – 400         > 250 – 350     250.5 – 350.4\n//     Hazardous                                 401 – 500         > 350 – 500     350.5 – 500\n//     */\n//     if (pm > 350.5) {\n//       return 401;\n//     } else if (pm > 250.5) {\n//       return 301;\n//     } else if (pm > 150.5) {\n//       return 201;\n//     } else if (pm > 55.5) {\n//       return 151;\n//     } else if (pm > 35.5) {\n//       return 101;\n//     } else if (pm > 12.1) {\n//       return 51;\n//     } else if (pm >= 0) {\n//       return 0;\n//     } else {\n//       return 0;\n//     }\n  \n// }\n  \n// function bphFromPM(pm) \n// {\n//     //return 0;\n//     if (isNaN(pm)) return 0;\n//     if (pm === undefined) return 0;\n//     if (pm < 0) return 0;\n//     /*      \n//           Good                              0 - 50         0.0 - 15.0         0.0 – 12.0\n//     Moderate                        51 - 100           >15.0 - 40        12.1 – 35.4\n//     Unhealthy for Sensitive Groups   101 – 150     >40 – 65          35.5 – 55.4\n//     Unhealthy                                 151 – 200         > 65 – 150       55.5 – 150.4\n//     Very Unhealthy                    201 – 300 > 150 – 250     150.5 – 250.4\n//     Hazardous                                 301 – 400         > 250 – 350     250.5 – 350.4\n//     Hazardous                                 401 – 500         > 350 – 500     350.5 – 500\n//     */\n//     if (pm > 350.5) {\n//       return 500;\n//     } else if (pm > 250.5) {\n//       return 500;\n//     } else if (pm > 150.5) {\n//       return 300;\n//     } else if (pm > 55.5) {\n//       return 200;\n//     } else if (pm > 35.5) {\n//       return 150;\n//     } else if (pm > 12.1) {\n//       return 100;\n//     } else if (pm >= 0) {\n//       return 50;\n//     } else {\n//       return 0;\n//     }\n  \n// }\n  \nfunction calcAQI(Cp, Ih, Il, BPh, BPl) \n{\n    var a = (Ih - Il);\n    var b = (BPh - BPl);\n    var c = (Cp - BPl);\n    return Math.round((a / b) * c + Il);\n}\n  \n  \nexport function getAQIDescription(aqi) \n{\n    if (aqi >= 401) {\n      return 'Hazardous';\n    } else if (aqi >= 301) {\n      return 'Hazardous';\n    } else if (aqi >= 201) {\n      return 'Very Unhealthy';\n    } else if (aqi >= 151) {\n      return 'Unhealthy';\n    } else if (aqi >= 101) {\n      return 'Unhealthy for Sensitive Groups';\n    } else if (aqi >= 51) {\n      return 'Moderate';\n    } else if (aqi >= 0) {\n      return 'Good';\n    } else {\n      return undefined;\n    }\n}\n  \n  \nexport function getAQIMessage(aqi) \n{\n    if (aqi >= 401) {\n      return '>401: Health alert: everyone may experience more serious health effects';\n    } else if (aqi >= 301) {\n      return '301-400: Health alert: everyone may experience more serious health effects';\n    } else if (aqi >= 201) {\n      return '201-300: Health warnings of emergency conditions. The entire population is more likely to be affected. ';\n    } else if (aqi >= 151) {\n      return '151-200: Everyone may begin to experience health effects; members of sensitive groups may experience more serious health effects.';\n    } else if (aqi >= 101) {\n      return '101-150: Members of sensitive groups may experience health effects. The general public is not likely to be affected.';\n    } else if (aqi >= 51) {\n      return '51-100: Air quality is acceptable; however, for some pollutants there may be a moderate health concern for a very small number of people who are unusually sensitive to air pollution.';\n    } else if (aqi >= 0) {\n      return '0-50: Air quality is considered satisfactory, and air pollution poses little or no risk';\n    } else {\n      return undefined;\n    }\n}","import { Disclosure } from '@headlessui/react';\nimport { Icon } from '@iconify/react';\nimport { Link } from 'react-router-dom';\n\nconst navigation = [\n  { name: 'Home', href: '/', current: false },\n  { name: 'Map', href: '/Map', current: false },\n  { name: 'Dashboard', href: '/Dashboard', current: false }\n];\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ');\n}\n\nfunction NavBar() {\n  return (\n    <Disclosure as='nav' className='bg-gray-800'>\n      {({ open }) => (\n        <>\n          <div className='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8'>\n            <div className='flex items-center justify-between h-16'>\n              <div className='flex items-center'>\n                <div className='flex-shrink-0'>\n                  <img\n                    className='h-10 w-38'\n                    src='https://schools.pgcps.org/williamschmidt/images/schmidt-header-dark.png'\n                    alt='Workflow'\n                  />\n                </div>\n                <div className='hidden md:block'>\n                  <div className='ml-10 flex items-baseline space-x-4'>\n                    {navigation.map((item) => (\n                      <Link\n                        to={item.href}\n                        className={classNames(\n                          item.current\n                            ? 'bg-gray-900 text-white'\n                            : 'text-gray-300 hover:bg-gray-700 hover:text-white',\n                          'px-3 py-2 rounded-md text-sm font-medium'\n                        )}\n                      >\n                        {item.name}\n                      </Link>\n                    ))}\n                  </div>\n                </div>\n              </div>\n              <div className='-mr-2 flex md:hidden'>\n                {/* Mobile menu button */}\n                <Disclosure.Button className='bg-gray-800 inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white'>\n                  <span className='sr-only'>Open main menu</span>\n                  {open ? (\n                    <Icon\n                      icon='heroicons-outline:x'\n                      className='block h-6 w-6'\n                      aria-hidden='true'\n                    />\n                  ) : (\n                    <Icon\n                      icon='heroicons-outline:menu'\n                      className='block h-6 w-6'\n                      aria-hidden='true'\n                    />\n                  )}\n                </Disclosure.Button>\n              </div>\n            </div>\n          </div>\n\n          <Disclosure.Panel className='md:hidden'>\n            <div className='px-2 pt-2 pb-3 space-y-1 sm:px-3'>\n              {navigation.map((item) => (\n                <Disclosure.Button\n                  key={item.name}\n                  as='a'\n                  href={item.href}\n                  className={classNames(\n                    item.current\n                      ? 'bg-gray-900 text-white'\n                      : 'text-gray-300 hover:bg-gray-700 hover:text-white',\n                    'block px-3 py-2 rounded-md text-base font-medium'\n                  )}\n                  aria-current={item.current ? 'page' : undefined}\n                >\n                  {item.name}\n                </Disclosure.Button>\n              ))}\n            </div>\n            <div className='pt-4 pb-3 border-t border-gray-700'>\n              <div className='flex items-center px-5'>\n                <button\n                  type='button'\n                  className='ml-auto bg-gray-800 flex-shrink-0 p-1 rounded-full text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white'\n                >\n                  <span className='sr-only'>View notifications</span>\n                  <Icon\n                    icon='heroicons-outline:bell'\n                    className='h-6 w-6'\n                    aria-hidden='true'\n                  />\n                </button>\n              </div>\n            </div>\n          </Disclosure.Panel>\n        </>\n      )}\n    </Disclosure>\n  );\n}\n\nexport default NavBar;\n","import { Fragment } from 'react';\nimport {\n  AnnotationIcon,\n  GlobeAltIcon,\n  LightningBoltIcon,\n  ScaleIcon\n} from '@heroicons/react/outline';\nconst features = [\n  {\n    name: 'Connected to the Purple Air Network',\n    description:\n      'Our project displays the air quality within PG County, geared towards students and faculty alike.',\n    icon: GlobeAltIcon\n  },\n  {\n    name: 'Compare Locations',\n    description:\n      'This website will have the ability to compare and contrast different regions in the county.',\n    icon: ScaleIcon\n  },\n  {\n    name: 'Live Air Quality Data',\n    description:\n      'Our site utilizes the data found from https://map.purpleair.com/ , updated in real time for transparent use.',\n    icon: LightningBoltIcon\n  },\n  {\n    name: 'Mobile notifications',\n    description: 'This runs for both desktop and mobile applications!',\n    icon: AnnotationIcon\n  }\n];\nfunction Home() {\n  return (\n    <>\n      <main>\n        <div className='max-w-7xl mx-auto py-6 sm:px-6 lg:px-8'>\n          <div className='py-12 bg-white'>\n            <div className='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8'>\n              <div className='lg:text-center'>\n                <h2 className='text-base text-indigo-600 font-semibold tracking-wide uppercase'>\n                  Air Quality\n                </h2>\n                <p className='mt-2 text-3xl leading-8 font-extrabold tracking-tight text-gray-900 sm:text-4xl'>\n                  Schmidt Center Dashboard\n                </p>\n              </div>\n\n              <div className='mt-10'>\n                <dl className='space-y-10 md:space-y-0 md:grid md:grid-cols-2 md:gap-x-8 md:gap-y-10'>\n                  {features.map((feature) => (\n                    <div key={feature.name} className='relative'>\n                      <dt>\n                        <div className='absolute flex items-center justify-center h-12 w-12 rounded-md bg-indigo-500 text-white'>\n                          <feature.icon\n                            className='h-6 w-6'\n                            aria-hidden='true'\n                          />\n                        </div>\n                        <p className='ml-16 text-lg leading-6 font-medium text-gray-900'>\n                          {feature.name}\n                        </p>\n                      </dt>\n                      <dd className='mt-2 ml-16 text-base text-gray-500'>\n                        {feature.description}\n                      </dd>\n                    </div>\n                  ))}\n                </dl>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </>\n  );\n}\n\nexport default Home;\n","function aqiGradeRGB(current) {\n  if (current === undefined) {\n    return 'No-Data';\n  } else if (current >= 0 && current <= 50) {\n    return ['Satisfactory', 0, 50];\n  } else if (current > 50 && current <= 100) {\n    return ['Acceptable', 51, 100];\n  } else if (current > 100 && current <= 150) {\n    return ['Poor', 101, 150];\n  } else if (current > 150 && current <= 200) {\n    return ['Very-Poor', 151, 200];\n  } else if (current > 200 && current <= 300) { \n    return ['Health-Alert', 201, 300];\n  } else if (current > 300) {\n    return ['Health-Warning', 301, '∞'];\n  }\n}\n\nexport default aqiGradeRGB;\n","import {\n  MapContainer,\n  TileLayer,\n  Marker,\n  Popup,\n  LayersControl,\n  FeatureGroup\n} from 'react-leaflet';\nimport aqiGradeRGB from '../helpers/AQI';\nimport './aqi.css';\n\nimport React, { useState, useEffect } from 'react';\nvar all_sensors;\n//import { data } from './displayChart';\n\n//https://api.thingspeak.com/channels/1344510/feeds.json?api_key=VJ570KKB1RMDD6NU\n\nfunction calcAvgAQI(sensors) {\n  let sum = 0;\n  for (const sensorID in sensors) {\n    if (sensors.hasOwnProperty(sensorID)) {\n      let sensor = sensors[sensorID];\n      sum += sensor.AQI;\n    }\n  }\n\n  let avg = Math.round(sum / Object.keys(sensors).length);\n  return avg;\n}\n\nfunction showLabelMap(sensorData) {\n  const dataArray = [];\n  for (const sensorKey in sensorData) {\n    if (sensorData.hasOwnProperty(sensorKey)) {\n      let sensor = sensorData[sensorKey];\n      dataArray.push(\n        <Marker position={[sensor.Latitude, sensor.Longitude]} key={sensorKey}>\n          <Popup>\n            <div\n              className='container mx-auto p-2 text-center rounded-md'\n              id={aqiGradeRGB(sensor.AQI)}\n              key={sensorKey}\n            >\n              <h1 className='font-sans font-bold '>Label: {sensor.Label}</h1>\n              <h1 className='font-sans font-bold '>Sensor ID: {sensorKey}</h1>\n              <h1 className='font-sans font-bold'>AQI: {sensor.AQI}</h1>\n              <h1 className='font-sans font-bold p-1'>\n                AQI Description: {sensor.AQIDescription}\n              </h1>\n              <p className='font-sans p-1'>{sensor.AQIMessage}</p>\n            </div>\n          </Popup>\n        </Marker>\n      );\n    }\n  }\n\n  return dataArray;\n}\n\nfunction MapView() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [sensors, setSensorData] = useState({\n    allSensors: null,\n    north: null,\n    central: null,\n    inner: null,\n    south: null,\n    rural: null\n  });\n  const center = [38.906334, -76.882176];\n  // const centralCounty = [38.8275, -76.751111];\n  // const northCounty = [39.019989, -76.879418];\n  // const innerBeltway = [38.85944, -76.889167];\n  // const southCounty = [38.810556, -76.946389];\n  // const rural = [38.698611, -76.849167];\n  useEffect(() => {\n    const fetchData1 = async () => {\n      try {\n        let data = await fetch('/.netlify/functions/processed');\n        data = await data.json();\n        setSensorData({\n          allSensors: data.schmidtSensorsData,\n          north: data.northCountySensorsData,\n          central: data.centralCountySensorsData,\n          inner: data.innerBeltwaySensorsData,\n          south: data.southCountySensorsData,\n          rural: data.ruralTierSensorsData\n        });\n        all_sensors = data.schmidtSensorsData;\n        setIsLoaded(true);\n      } catch (err) {\n        setError(true);\n      }\n    };\n    fetchData1();\n  }, []);\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    const northCountySensorsMarkers = [...showLabelMap(sensors.north)];\n    const centralCountySensorsMarkers = [...showLabelMap(sensors.central)];\n    const innerBeltwaySensorsMarkers = [...showLabelMap(sensors.inner)];\n    const southCountySensorsMarkers = [...showLabelMap(sensors.south)];\n    const ruralTierSensorsMarkers = [...showLabelMap(sensors.rural)];\n    const avg = calcAvgAQI(all_sensors);\n    return (\n      <><><div className='sm:absolute sm:top-40 sm:right-44 w-1/6'>\n        <div>\n          <p className='text-2xl text-gray-600'><span className='font-bold'>County AQI: </span>{avg}</p>\n        </div>\n        <div\n          className='mt-3 py-4 rounded-md text-center'\n          id={aqiGradeRGB(avg)[0]}\n        >\n          <h2>\n            {aqiGradeRGB(avg)[0]}\n          </h2>\n        </div>\n        <div className='flex'>\n          <div className='py-1 font-medium'>{aqiGradeRGB(avg)[1]}</div>\n          <div>\n            <img\n              src='/arrow.jpg'\n              alt='Double Sided Arrow' />\n          </div>\n          <div className='py-1 font-medium'>{aqiGradeRGB(avg)[2]}</div>\n        </div>\n      </div></><><MapContainer center={center} zoom={10} scrollWheelZoom={true}>\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png' />\n          <LayersControl position='topright'>\n            <LayersControl.Overlay checked name='North'>\n              <FeatureGroup>{northCountySensorsMarkers}</FeatureGroup>\n            </LayersControl.Overlay>\n            <LayersControl.Overlay checked name='Central'>\n              <FeatureGroup>{centralCountySensorsMarkers}</FeatureGroup>\n            </LayersControl.Overlay>\n            <LayersControl.Overlay checked name='Rural'>\n              <FeatureGroup>{ruralTierSensorsMarkers}</FeatureGroup>\n            </LayersControl.Overlay>\n            <LayersControl.Overlay checked name='Inner'>\n              <FeatureGroup>{innerBeltwaySensorsMarkers}</FeatureGroup>\n            </LayersControl.Overlay>\n            <LayersControl.Overlay checked name='South'>\n              <FeatureGroup>{southCountySensorsMarkers}</FeatureGroup>\n            </LayersControl.Overlay>\n          </LayersControl>\n        </MapContainer></></>\n    );\n  }\n}\n\n/*function AQIView() {\n  let avg = 0;\n  const [sensors, setSensorData] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    setSensorData(all_sensors);\n    console.log('TestingBBBB', all_sensors);\n    setIsLoaded(true);\n    //avg = calcAvgAQI(sensors);\n  }, [])\n   if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <>\n        <div className='flex-col'>\n          <div>\n            <p className='text-2xl text-gray-600'><span className='font-bold'>County AQI: </span>{avg}</p>\n          </div>\n          <div\n            className='mt-3 py-4 rounded-md text-center'\n            id={aqiGradeRGB(avg)}\n          >\n            <h2>\n              <stong>{aqiGradeRGB(avg)}</stong>\n            </h2>\n          </div>\n          <div className='flex'>\n           <div className='py-1 font-medium'>0</div>\n            <div>\n              <img\n                src='/arrow.jpg'\n                alt='Double Sided Arrow' \n              />\n            </div>\n            <div className='py-1 font-medium'>50</div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}*/\n\nexport default MapView;\n","import React, { useState, useEffect } from 'react';\nimport '../index.css';\n\nfunction WeatherWidget() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [resObj, setResObj] = useState({});\n\n  useEffect(() => {\n    fetch(\n      'https://api.openweathermap.org/data/2.5/weather?lat=38&lon=-76&units=imperial&appid=9cf81dbd01ad9692bf2dcd8da6af1deb'\n    )\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setResObj(result);\n          setIsLoaded(true);\n        },\n\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      );\n  }, []);\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <div>\n        <div className='shadow-inner opacity-100 p-2 font-medium text-gray-700'>\n          <h2>Prince George's County, MD</h2>\n          <div>\n            {/* {console.log(JSON.stringify(resObj))} */}\n            <p>\n              {resObj.main.temp} ºF, feels like: {resObj.main.feels_like}\n            </p>\n            <p>\n              {resObj.weather[0].description.charAt(0).toUpperCase() +\n                resObj.weather[0].description.slice(1)}\n            </p>\n            <p>Wind: {resObj.wind.speed} MPH</p>\n            <p>Humidity: {resObj.main.humidity}%</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WeatherWidget;\n","import MapView from '../components/MapView.js';\nimport { Fragment } from 'react';\nimport WeatherWidget from '../components/Weather-Widget.js';\n\nfunction Map() {\n  return ( \n    <>\n      <header className='bg-white shadow'>\n      <h1 className='text-3xl font-bold text-gray-600 max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8'>Air Quality Map</h1>   \n      </header>\n      <main>\n        <div className='max-w-7xl mx-auto py-6 sm:px-6 lg:px-8 flex'>\n          {/* Map Column*/}\n          <div className='px-4 sm:px-0 w-3/4'>\n            <MapView />\n          </div>\n          {/* Filters Column */}\n          <div className='px-6 w-1/4 py-36'>\n            <div>\n              <WeatherWidget  />\n            </div>\n          </div>\n          {/* /End replace */}\n        </div>\n      </main>\n    </>\n  );\n}\n\nexport default Map;","import { useState } from 'react';\nimport { render } from 'react-dom';\n\nconst displayChart = require('./displayChart');\n\nexport function HandleInputForm() {\n  // const canvasObj = canvasRef.current;\n  // const ctx = canvasObj.getContext('2d');\n  const [inputs, setInputs] = useState({\n    sensorid: '',\n    startdate: '',\n    enddate: '',\n    temperature: false,\n    aqi: false,\n    humidity: false,\n    pm_1: false,\n    pm_25: false,\n    pm_10: false\n  });\n\n  const handleChange = (e) => {\n    setInputs((oldValues) => ({\n      ...oldValues,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const handleCheckboxChange = (e) => {\n    setInputs((oldValues) => ({\n      ...oldValues,\n      [e.target.name]: e.target.checked\n    }));\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    alert('This was submitted: ' + JSON.stringify(inputs));\n    const rootElement = document.getElementById('chart-display');\n    const Display = () => displayChart.ShowChart(inputs);\n    render(<Display />, rootElement);\n    //displayChart.showChart(inputs.sensorid, inputs.startdate, inputs.enddate);\n    //getRequestedData(inputs.sensorid, inputs.startdate, inputs.enddate);\n  };\n\n  return (\n    <div>\n      <div>\n        <form\n          onSubmit={handleSubmit}\n          className='user-inputs'\n          method='post'\n          name='user-input'\n        >\n          <h2>\n            <b>Enter sensor ID and date range:</b>\n          </h2>\n          <div className='user-input'>\n            <label htmlFor='sensor-id'> Sensor ID: </label>\n            <input\n              type='number'\n              id='sensor-id'\n              name='sensorid'\n              placeholder='Sensor ID'\n              value={inputs.sensorid}\n              onChange={handleChange}\n              required\n            ></input>\n          </div>\n          <div className='user-input'>\n            <label htmlFor='start-date'> Start Date: </label>\n            <input\n              type='date'\n              id='start-date'\n              name='startdate'\n              value={inputs.startdate}\n              onChange={handleChange}\n              required\n            ></input>\n          </div>\n          <div className='user-input'>\n            <label htmlFor='end-date'> End Date: </label>\n            <input\n              type='date'\n              id='end-date'\n              name='enddate'\n              value={inputs.enddate}\n              onChange={handleChange}\n              required\n            ></input>\n          </div>\n          <h2>\n            <b>Choose a feature to compare:</b>\n          </h2>\n          <p>(Default: Temperature and AQI)</p>\n          <div className='user-input'>\n            <input\n              type='checkbox'\n              id='temperature'\n              name='temperature'\n              value={inputs.temperature}\n              onChange={handleCheckboxChange}\n            ></input>\n            <label htmlFor='temperature'>Temperature</label>\n          </div>\n          <div className='user-input'>\n            <input\n              type='checkbox'\n              id='humidity'\n              name='humidity'\n              value={inputs.humidity}\n              onChange={handleCheckboxChange}\n            ></input>\n            <label htmlFor='humidity'>Humidity</label>\n          </div>\n          <div className='user-input'>\n            <input\n              type='checkbox'\n              id='aqi'\n              name='aqi'\n              value={inputs.aqi}\n              onChange={handleCheckboxChange}\n            ></input>\n            <label htmlFor='AQI'>AQI (Air Quality Index)</label>\n          </div>\n          <div className='user-input'>\n            <input\n              type='checkbox'\n              id='pm_1'\n              name='pm_1'\n              value={inputs.pm_1}\n              onChange={handleCheckboxChange}\n            ></input>\n            <label htmlFor='pm_1_0'>\n              PM_1.0 (Atmospheric Particulate Matter: 1.0 micrometers or less)\n            </label>\n          </div>\n          <div className='user-input'>\n            <input\n              type='checkbox'\n              id='pm_25'\n              name='pm_25'\n              value={inputs.pm_25}\n              onChange={handleCheckboxChange}\n            ></input>\n            <label htmlFor='pm_2_5'>\n              PM_2.5 (Atmospheric Particulate Matter: 2.5 micrometers or less)\n            </label>\n          </div>\n          <div className='user-input'>\n            <input\n              type='checkbox'\n              id='pm_10'\n              name='pm_10'\n              value={inputs.pm_10}\n              onChange={handleCheckboxChange}\n            ></input>\n            <label htmlFor='pm_10_0'>\n              PM_10.0 (Atmospheric Particulate Matter: 10 micrometers or less)\n            </label>\n          </div>\n\n          <div className='user-input'>\n            <input type='submit' value='Submit' id='submit'></input>\n          </div>\n        </form>\n      </div>\n      <div className='chart-display' id='chart-display'></div>\n    </div>\n  );\n}\n\nexport default HandleInputForm;\n","import { Fragment } from 'react';\nimport HandleInputForm from '../components/dashboard';\n//import DisplayOnSubmit from '../helpers/drawCanvas.js';\nfunction DashBoard() {\n  return (\n       <>\n        <header className=\"bg-white shadow\">\n          <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n            <h1 className=\"text-3xl font-bold text-gray-600\">Dashboard</h1>\n          </div>\n        </header>\n        <main>\n          <div className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n            {/* Replace with your content */}\n            <div className=\"px-4 py-6 sm:px-0\">\n              <div className=\"border-4 border-dashed border-gray-200 rounded-lg\">\n                \n               </div>\n            </div>\n            {/* /End replace */}\n          </div>\n          <HandleInputForm />\n        </main>\n    </>\n  )\n}\nexport default DashBoard;","import './App.css';\nimport NavBar from './components/NavBar.js';\nimport Home from './pages/Home.js';\nimport Map from './pages/Map.js';\nimport DashBoard from './pages/DashBoard.js';\nimport React from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  //Link,\n  Routes\n} from 'react-router-dom';\n\nexport default function App() {\n  return (\n    <Router>\n      <div className='min-h-full'>\n        <NavBar />\n        <Routes>\n          <Route path='/' element={<Home />} />\n          <Route path='/Map' element={<Map />} />\n          <Route path='/DashBoard' element={<DashBoard />} />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}