{"version":3,"sources":["components/displayChart.js","components/dataHandler.js","components/AQIcalculator.js","components/NavBar.js","pages/Home.js","helpers/AQI.js","components/MapView.js","components/Weather-Widget.js","pages/Map.js","components/dashboard.js","pages/DashBoard.js","App.js","index.js"],"names":["thingspeakHandler","require","labels","pm_1_atms","temperatures","humidities","aqis","pm_2_5_atms","pm_10_atms","aqi_descriptions","chartData","inputs","a","sensorids","sensorid","startdate","enddate","console","log","getThingspeakProcessedData","data","forEach","element","sensor_ID","feeds","feed","push","created_at","Temperature","Humidity","AQI","PM25ATM","PM100ATM","PM10ATM","AQIDescription","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","options","responsive","plugins","legend","position","title","display","text","datasets","temperature","color","getColor","backgroundColor","getBackgroundColor","label","borderColor","humidity","aqi","pm_25","pm_1","pm_10","Test","ShowChart","useState","error","setError","isLoaded","setIsLoaded","useEffect","getdata","message","o","Math","round","r","random","replace","fetch","AQICalculator","getSingleSensorData","channel_id","API_key","start_date","end_date","Promise","resolve","reject","url","then","res","json","response","status","Error","singleSensorData","ID","Channel","channel","Feeds","catch","err","getMultipleSensorData","sensor_IDs","multipleSensorsData","purpleairData","schmidtSensorsData","purpleairSchmidtSensorsData","undefined","sensorData","Primary_Channel_ID","Primary_KEY","thisSensorData","processThingspeakData","data_to_process","thingspeakProcessedData","reg","processed","map","el","JSON","parse","stringify","replaceAll","field1","field2","field3","field4","field5","field6","field7","field8","calculatedAQI","aqiFromPM","parseFloat","getAQIDescription","AQIMessage","getAQIMessage","getThingspeakRawData","pm","isNaN","calcAQI","Cp","Ih","Il","BPh","BPl","b","c","navigation","name","href","current","classNames","classes","filter","Boolean","join","NavBar","as","className","open","src","alt","item","to","type","icon","Button","Panel","features","description","GlobeAltIcon","ScaleIcon","LightningBoltIcon","AnnotationIcon","Home","feature","aqiGradeRGB","all_sensors","showLabelMap","dataArray","sensorKey","hasOwnProperty","sensor","Marker","Latitude","Longitude","Popup","id","Label","MapView","allSensors","north","central","inner","south","rural","sensors","setSensorData","fetchData1","northCountySensorsData","centralCountySensorsData","innerBeltwaySensorsData","southCountySensorsData","ruralTierSensorsData","northCountySensorsMarkers","centralCountySensorsMarkers","innerBeltwaySensorsMarkers","southCountySensorsMarkers","ruralTierSensorsMarkers","avg","sum","sensorID","Object","keys","length","calcAvgAQI","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","LayersControl","Overlay","checked","FeatureGroup","WeatherWidget","resObj","setResObj","result","main","temp","feels_like","weather","charAt","toUpperCase","slice","wind","speed","Map","displayChart","HandleInputForm","setInputs","handleChange","e","oldValues","target","value","handleCheckboxChange","handleSubmit","event","preventDefault","alert","rootElement","document","getElementById","Display","render","onSubmit","method","htmlFor","placeholder","onChange","required","DashBoard","App","path","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.6e6aed56.chunk.js","sourcesContent":["import { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport React from 'react';\r\n\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\n// import faker from 'faker';\r\n// import { render } from \"react-dom\";\r\n\r\nvar thingspeakHandler = require('./dataHandler');\r\n\r\nconst labels = [];\r\nconst pm_1_atms = [];\r\nconst temperatures = [];\r\nconst humidities = [];\r\nconst aqis = [];\r\nconst pm_2_5_atms = [];\r\nconst pm_10_atms = [];\r\nconst aqi_descriptions = [];\r\n\r\nexport async function chartData(inputs){\r\n\r\n    const sensorids = [inputs.sensorid];\r\n    const startdate = inputs.startdate;\r\n    const enddate = inputs.enddate;\r\n\r\n    console.log(\"received id:\"+ sensorids)\r\n    const data = await thingspeakHandler.getThingspeakProcessedData(sensorids, startdate, enddate);\r\n    console.log('DATA: ', data);\r\n    data.forEach(element => {\r\n        console.log(\"Feed of:\" + element.sensor_ID + \"Feeds:\" + element.feeds);\r\n\r\n        element.feeds.forEach(feed => {\r\n            labels.push(feed.created_at);\r\n            temperatures.push(feed.Temperature);\r\n            humidities.push(feed.Humidity);\r\n            aqis.push(feed.AQI);\r\n            pm_2_5_atms.push(feed.PM25ATM);\r\n            pm_10_atms.push(feed.PM100ATM);\r\n            pm_1_atms.push(feed.PM10ATM);\r\n            aqi_descriptions.push(feed.AQIDescription);\r\n        });\r\n\r\n        console.log(\"Humidities\" + humidities)\r\n        \r\n    });\r\n    \r\n}\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport const options = {\r\n  responsive: true,\r\n  plugins: {\r\n    legend: {\r\n      position: 'top',\r\n    },\r\n    title: {\r\n      display: true,\r\n      text: 'Chart.js Data Chart',\r\n    },\r\n  },\r\n};\r\n\r\n//const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\r\n\r\nexport const data = (inputs) => {\r\n    const data = {\r\n        labels,\r\n        datasets: [] \r\n    };\r\n\r\n    if(inputs.temperature) {\r\n        const color = getColor();\r\n        const backgroundColor = getBackgroundColor(color);\r\n        data.datasets.push(\r\n            {\r\n                label: 'Temperature',\r\n                data: temperatures,\r\n                borderColor: color,\r\n                backgroundColor: backgroundColor,\r\n            }\r\n        )\r\n    }\r\n\r\n    if(inputs.humidity) {\r\n        const color = getColor();\r\n        const backgroundColor = getBackgroundColor(color);\r\n        data.datasets.push(\r\n            {\r\n                label: 'Humidity',\r\n                data: humidities,\r\n                borderColor: color,\r\n                backgroundColor: backgroundColor,\r\n            }\r\n        )\r\n    }\r\n\r\n    if(inputs.aqi) {\r\n        const color = getColor();\r\n        const backgroundColor = getBackgroundColor(color);\r\n        data.datasets.push(\r\n            {\r\n                label: 'AQI (Air Quality Index)',\r\n                data: aqis,\r\n                borderColor: color,\r\n                backgroundColor: backgroundColor,\r\n            }\r\n        )\r\n    }\r\n\r\n    if(inputs.pm_25) {\r\n        const color = getColor();\r\n        const backgroundColor = getBackgroundColor(color);\r\n        data.datasets.push(\r\n            {\r\n                label: 'PM 2.5 ATM',\r\n                data: pm_2_5_atms,\r\n                borderColor: color,\r\n                backgroundColor: backgroundColor,\r\n            }\r\n        )\r\n    }\r\n\r\n    if(inputs.pm_1) {\r\n        const color = getColor();\r\n        const backgroundColor = getBackgroundColor(color);\r\n        data.datasets.push(\r\n            {\r\n                label: 'PM 1.0 ATM',\r\n                data: pm_1_atms,\r\n                borderColor: color,\r\n                backgroundColor: backgroundColor,\r\n            }\r\n        )\r\n    }\r\n\r\n    if(inputs.pm_10) {\r\n        const color = getColor();\r\n        const backgroundColor = getBackgroundColor(color);\r\n        data.datasets.push(\r\n            {\r\n                label: 'PM 10 ATM',\r\n                data: pm_10_atms,\r\n                borderColor: color,\r\n                backgroundColor: backgroundColor,\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    return data;\r\n\r\n}\r\n\r\n// export const data = {\r\n//   labels,\r\n//   datasets: [\r\n//     {\r\n//       label: 'Temperature',\r\n//       data: temperatures, //labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n//       borderColor: 'rgb(255, 99, 132)',\r\n//       backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n//     },\r\n//     {\r\n//       label: 'AQI',\r\n//       data: aqis, //labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n//       borderColor: 'rgb(53, 162, 235)',\r\n//       backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n//     },\r\n//   ],\r\n// };\r\n\r\nexport function Test() {\r\n   return <Line options={options} data={data} />;\r\n}\r\n\r\n\r\n\r\nexport function ShowChart(inputs){\r\n\r\n    console.log(\"Here we are\");\r\n\r\n    const [error, setError] = useState(null);   \r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n        const getdata = async () => {\r\n\r\n            try {\r\n                await chartData(inputs);\r\n                setIsLoaded(true);\r\n            }\r\n            catch(err) {\r\n                setError(true);\r\n            }\r\n        };\r\n\r\n        getdata();\r\n\r\n    });\r\n\r\n    if (error) {\r\n\r\n        return <div>Error: {error.message}</div>;\r\n\r\n    } else if (!isLoaded) {\r\n\r\n        return <div>Loading...</div>;\r\n\r\n    } else {\r\n\r\n        return (\r\n            <div>\r\n                <Line options={options} data={data(inputs)} />\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nfunction getColor() {\r\n\r\n    var o = Math.round, r = Math.random, s = 255;\r\n    return 'rgb(' + o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s) + ')';\r\n\r\n}\r\n\r\nfunction getBackgroundColor(color){\r\n    return (color.replace(')', '').replace('rgb', 'rgba') + ',0.5)');\r\n}","//import { aqiFromPM, getAQIDescription, getAQIMessage } from \"./AQIcalculator.js\";\r\n//import { getUpdatedSensorsData } from \"./purpleairDataHandler.js\";\r\nvar fetch = require('node-fetch');\r\nvar AQICalculator = require('./AQIcalculator');\r\n\r\n/**\r\n * This function get the data from thingspeak after retreiving the sensor's channel id and API from\r\n * purpleair data.\r\n * @param {*} sensor_IDs: array of sensor ids to retreive the data for. Could be an array of one value \r\n * @param {*} channel_id: Thingspeak api key for the sensor.\r\n * @param {*} channel_id : Thingspeak channel id for the sensor.\r\n * @param {*} start_date: The start date for which to retreive the data. \r\n * @param {*} end_date: The End date for which to retreive the data. \r\n * @returns: Returns a Promise. When resolved contains the data retreived for a single sensor. \r\n */\r\n\r\nconst getSingleSensorData = async(sensor_ID, channel_id, API_key, start_date, end_date) =>\r\n{\r\n    return new Promise((resolve, reject) => {\r\n        const url = `https://api.thingspeak.com/channels/${channel_id}/feeds.json?api_key=${API_key}&start=${start_date}&end=${end_date}`;\r\n        console.log(url)\r\n        fetch(url).then(res => res.json())\r\n        .then(response => {\r\n            //console.log(response)\r\n            if(response.status) {\r\n                if(response.status !== 200) {throw new Error(response.message)}\r\n            }\r\n \r\n            const singleSensorData = {\r\n                ID: sensor_ID,\r\n                Channel: response.channel,\r\n                Feeds: response.feeds\r\n            }\r\n \r\n            resolve({\r\n                error: false,\r\n                data: singleSensorData\r\n            })\r\n \r\n        })\r\n        .catch(err => {\r\n            const singleSensorData = {}\r\n            reject({\r\n                error: true,\r\n                message: err.message,\r\n                data: singleSensorData\r\n            })\r\n        })\r\n    })\r\n}\r\n\r\n/**\r\n * This function returns thingspeak data for multiple sensors, a start date and an end date\r\n * @param {*} sensor_IDs : List of sensors for which to retreive the data\r\n * @param {*} start_date : The start date for which to retreive the data. \r\n * @param {*} end_date: The End date for which to retreive the data. \r\n * @returns : A list of object containing the sensors data.\r\n */\r\n \r\nconst getMultipleSensorData = async(sensor_IDs, start_date, end_date) =>\r\n{\r\n    const multipleSensorsData = [];\r\n    try {\r\n        // Retreive updated sensor data from purpleair\r\n        let purpleairData = await fetch('/.netlify/functions/processed');\r\n        purpleairData = await purpleairData.json();\r\n        //console.log(\"Data boom bbom\", purpleairData);\r\n        const purpleairSchmidtSensorsData = await purpleairData.schmidtSensorsData;\r\n        //console.log(\"Data:\", purpleairSchmidtSensorsData);\r\n \r\n        for(let sensor_ID of sensor_IDs) {\r\n            // Get sensor data from purpleair\r\n            let sensorData = purpleairSchmidtSensorsData[sensor_ID];\r\n            if(sensorData !== undefined){\r\n                console.log(\"Data from getting data:\", sensorData);\r\n                // Get channel id and api key for the sensor\r\n                let channel_id = sensorData.Primary_Channel_ID;\r\n                let API_key = sensorData.Primary_KEY;\r\n                let thisSensorData = await getSingleSensorData(sensor_ID, channel_id, API_key, start_date, end_date);\r\n                multipleSensorsData.push(thisSensorData.data);\r\n            }\r\n            else {\r\n                //alert(\"bad sensorid\");\r\n            }\r\n            \r\n        }\r\n \r\n    }\r\n    catch (err){\r\n        console.log(err.message);\r\n    }\r\n \r\n    return multipleSensorsData;\r\n \r\n}\r\n\r\n\r\n/**\r\n * This function process the data from thingspeak ensuring proper field name\r\n * @param {*} data_to_process : Raw sensor data to be processed\r\n * @returns : The processed sensor data\r\n */\r\nconst processThingspeakData = (data_to_process) =>\r\n{\r\n    const thingspeakProcessedData = [];\r\n    try {\r\n        for(let element of data_to_process){\r\n            // Reprocessing the fields to their correct names indicated in the channels of the data\r\n            const reg = /[^a-zA-Z\\d:\\u00C0-\\u00FF]/g\r\n            let processed = element.Feeds.map(el => JSON.parse(JSON.stringify(el)\r\n                .replaceAll(\"field1\", element.Channel.field1.replace(reg,\"\"))\r\n                .replaceAll(\"field2\", element.Channel.field2.replace(reg,\"\"))\r\n                .replaceAll(\"field3\", element.Channel.field3.replace(reg,\"\"))\r\n                .replaceAll(\"field4\", element.Channel.field4.replace(reg,\"\"))\r\n                .replaceAll(\"field5\", element.Channel.field5.replace(reg,\"\"))\r\n                .replaceAll(\"field6\", element.Channel.field6.replace(reg,\"\"))\r\n                .replaceAll(\"field7\", element.Channel.field7.replace(reg,\"\"))\r\n                .replaceAll(\"field8\", element.Channel.field8.replace(reg,\"\"))\r\n            ))\r\n\r\n            // Adding AQI values and message to results\r\n            processed.forEach(el => {\r\n                let calculatedAQI = AQICalculator.aqiFromPM(parseFloat(el['PM25ATM']));\r\n                el.AQI = calculatedAQI;\r\n                el.AQIDescription = AQICalculator.getAQIDescription(calculatedAQI);\r\n                el.AQIMessage = AQICalculator.getAQIMessage(calculatedAQI);\r\n            });\r\n\r\n            // Save processed data to new array\r\n            thingspeakProcessedData.push({\r\n                sensor_ID: element.ID,\r\n                channel: element.Channel,\r\n                feeds: processed\r\n            });\r\n        \r\n        }\r\n    }\r\n    catch (err) {\r\n        console.log(err.message);\r\n    }\r\n    return thingspeakProcessedData;\r\n}\r\n\r\n// Get the processed data\r\nexport const getThingspeakProcessedData =  async function(sensor_IDs, start_date, end_date)\r\n{\r\n    return processThingspeakData((await getMultipleSensorData(sensor_IDs, start_date, end_date)));\r\n}\r\n\r\n// Get the raw data\r\nexport const getThingspeakRawData =  async function(sensor_IDs, start_date, end_date)\r\n{\r\n    return (await getMultipleSensorData(sensor_IDs, start_date, end_date));\r\n}\r\n\r\n// For testing \r\n// async function logData()\r\n// {\r\n//     const sensor_IDs = [131815, 102898];\r\n//     console.log(\"testing\", sensor_IDs)\r\n//     const start_date = \"2021-10-01\";\r\n//     const end_date = \"2021-11-01\";\r\n//     //const singleSensorData = (await getThingspeakRawData(sensor_IDs, start_date, end_date))\r\n//     const singleSensorData = (await getThingspeakProcessedData(sensor_IDs, start_date, end_date))\r\n//     console.log('Inside load data', singleSensorData);\r\n//     console.log(JSON.stringify(singleSensorData))\r\n//     const div = document.createElement('div');\r\n//     div.innerHTML = `<h2>What we have</h2> <br />${JSON.stringify(singleSensorData)}<br /><br />`;\r\n//     $('body').append(div);\r\n// }\r\n\r\n// window.onload = logData;\r\n","/*\r\nThe AQI is calculated using the EPA’s breakpoints as described in this \r\nlink: https://aqs.epa.gov/aqsweb/documents/codetables/aqi_breakpoints.html\r\n\r\nThe Code bellow is provided by Purple Air \r\nhere: https://docs.google.com/document/d/15ijz94dXJ-YAZLi9iZ_RaBwrZ4KtYeCy08goGBwnbCU/edit#\r\n\r\nFor more information regarding Air Quality Index (AQI),\r\nVisit: https://www.airnow.gov/aqi/aqi-basics/using-air-quality-index/\r\nFor Technical information, \r\nVisit: https://www.airnow.gov/publications/air-quality-index/technical-assistance-document-for-reporting-the-daily-aqi/\r\n\r\nThe following calculation reflect the standard AQI calculation provided by the Environmental Protection Agency (EPA)\r\n\r\nThis document converts PM2.5ug/m3 to AQI using the functions below:\r\n \r\nvar AQI = aqiFromPM(pm25value);\r\nvar AQIDescription = getAQIDescription(AQI); //A short description of the provided AQI\r\nvar AQIMessage = getAQIMessage(AQI); // What the provided AQI means (a longer description)\r\n\r\n*/\r\n\r\n\r\n// Air quality Index from PM2.5 Measurements\r\nexport function aqiFromPM(pm) \r\n{\r\n    if (isNaN(pm)) return \"-\";\r\n    if (pm === undefined) return \"-\";\r\n    if (pm < 0) return pm;\r\n    if (pm > 1000) return \"-\";\r\n    /*      \r\n    Good                           0 - 50         0.0 - 15.0         0.0 – 12.0\r\n    Moderate                        51 - 100           >15.0 - 40        12.1 – 35.4\r\n    Unhealthy for Sensitive Groups   101 – 150     >40 – 65          35.5 – 55.4\r\n    Unhealthy                                 151 – 200         > 65 – 150       55.5 – 150.4\r\n    Very Unhealthy                    201 – 300 > 150 – 250     150.5 – 250.4\r\n    Hazardous                                 301 – 400         > 250 – 350     250.5 – 350.4\r\n    Hazardous                                 401 – 500         > 350 – 500     350.5 – 500\r\n    */\r\n    if (pm > 350.5) {\r\n      return calcAQI(pm, 500, 401, 500, 350.5);\r\n    } else if (pm > 250.5) {\r\n      return calcAQI(pm, 400, 301, 350.4, 250.5);\r\n    } else if (pm > 150.5) {\r\n      return calcAQI(pm, 300, 201, 250.4, 150.5);\r\n    } else if (pm > 55.5) {\r\n      return calcAQI(pm, 200, 151, 150.4, 55.5);\r\n    } else if (pm > 35.5) {\r\n      return calcAQI(pm, 150, 101, 55.4, 35.5);\r\n    } else if (pm > 12.1) {\r\n      return calcAQI(pm, 100, 51, 35.4, 12.1);\r\n    } else if (pm >= 0) {\r\n      return calcAQI(pm, 50, 0, 12, 0);\r\n    } else {\r\n      return undefined;\r\n    }\r\n}\r\n\r\n// Calculates AQI from ozone measurements\r\n// function aqiFromOzone(ozone) \r\n// {\r\n//     if (isNaN(ozone)) return \"-\";\r\n//     if (ozone === undefined) return \"-\";\r\n//     if (ozone < 0) return ozone;\r\n//     if (ozone > 1000) return \"-\";\r\n//     /*      \r\n//     Good                           0 - 0.054\r\n//     Moderate                        0.055 - 0.070\r\n//     Unhealthy for Sensitive Groups  0.071 - 0.085\r\n//     Unhealthy                                 0.086 - 0.105 \r\n//     Very Unhealthy                    0.106 - 0.200\r\n//     Hazardous                                 0.405 - 0.604        \r\n//     */\r\n//     if (ozone > 0.200) {\r\n//       return calcAQI(ozone, 500, 301, 500, 0.200);\r\n//     } else if (ozone > 0.106) {\r\n//       return calcAQI(ozone, 300, 201, 0.200, 0.106);\r\n//     } else if (ozone > 0.086) {\r\n//       return calcAQI(ozone, 200, 151, 0.105 , 0.086);\r\n//     } else if (ozone > 0.071) {\r\n//       return calcAQI(ozone, 150, 101, 0.085, 0.071);\r\n//     } else if (ozone > 0.055) {\r\n//       return calcAQI(ozone, 100, 51, 0.070, 0.055);\r\n//     } else if (ozone >= 0) {\r\n//       return calcAQI(ozone, 50, 0, 0.054, 0);\r\n//     } else {\r\n//       return undefined;\r\n//     }\r\n// }\r\n  \r\n// function bplFromPM(pm) \r\n// {\r\n//     if (isNaN(pm)) return 0;\r\n//     if (pm === undefined) return 0;\r\n//     if (pm < 0) return 0;\r\n//     /*      \r\n//           Good                              0 - 50         0.0 - 15.0         0.0 – 12.0\r\n//     Moderate                        51 - 100           >15.0 - 40        12.1 – 35.4\r\n//     Unhealthy for Sensitive Groups   101 – 150     >40 – 65          35.5 – 55.4\r\n//     Unhealthy                                 151 – 200         > 65 – 150       55.5 – 150.4\r\n//     Very Unhealthy                    201 – 300 > 150 – 250     150.5 – 250.4\r\n//     Hazardous                                 301 – 400         > 250 – 350     250.5 – 350.4\r\n//     Hazardous                                 401 – 500         > 350 – 500     350.5 – 500\r\n//     */\r\n//     if (pm > 350.5) {\r\n//       return 401;\r\n//     } else if (pm > 250.5) {\r\n//       return 301;\r\n//     } else if (pm > 150.5) {\r\n//       return 201;\r\n//     } else if (pm > 55.5) {\r\n//       return 151;\r\n//     } else if (pm > 35.5) {\r\n//       return 101;\r\n//     } else if (pm > 12.1) {\r\n//       return 51;\r\n//     } else if (pm >= 0) {\r\n//       return 0;\r\n//     } else {\r\n//       return 0;\r\n//     }\r\n  \r\n// }\r\n  \r\n// function bphFromPM(pm) \r\n// {\r\n//     //return 0;\r\n//     if (isNaN(pm)) return 0;\r\n//     if (pm === undefined) return 0;\r\n//     if (pm < 0) return 0;\r\n//     /*      \r\n//           Good                              0 - 50         0.0 - 15.0         0.0 – 12.0\r\n//     Moderate                        51 - 100           >15.0 - 40        12.1 – 35.4\r\n//     Unhealthy for Sensitive Groups   101 – 150     >40 – 65          35.5 – 55.4\r\n//     Unhealthy                                 151 – 200         > 65 – 150       55.5 – 150.4\r\n//     Very Unhealthy                    201 – 300 > 150 – 250     150.5 – 250.4\r\n//     Hazardous                                 301 – 400         > 250 – 350     250.5 – 350.4\r\n//     Hazardous                                 401 – 500         > 350 – 500     350.5 – 500\r\n//     */\r\n//     if (pm > 350.5) {\r\n//       return 500;\r\n//     } else if (pm > 250.5) {\r\n//       return 500;\r\n//     } else if (pm > 150.5) {\r\n//       return 300;\r\n//     } else if (pm > 55.5) {\r\n//       return 200;\r\n//     } else if (pm > 35.5) {\r\n//       return 150;\r\n//     } else if (pm > 12.1) {\r\n//       return 100;\r\n//     } else if (pm >= 0) {\r\n//       return 50;\r\n//     } else {\r\n//       return 0;\r\n//     }\r\n  \r\n// }\r\n  \r\nfunction calcAQI(Cp, Ih, Il, BPh, BPl) \r\n{\r\n    var a = (Ih - Il);\r\n    var b = (BPh - BPl);\r\n    var c = (Cp - BPl);\r\n    return Math.round((a / b) * c + Il);\r\n}\r\n  \r\n  \r\nexport function getAQIDescription(aqi) \r\n{\r\n    if (aqi >= 401) {\r\n      return 'Hazardous';\r\n    } else if (aqi >= 301) {\r\n      return 'Hazardous';\r\n    } else if (aqi >= 201) {\r\n      return 'Very Unhealthy';\r\n    } else if (aqi >= 151) {\r\n      return 'Unhealthy';\r\n    } else if (aqi >= 101) {\r\n      return 'Unhealthy for Sensitive Groups';\r\n    } else if (aqi >= 51) {\r\n      return 'Moderate';\r\n    } else if (aqi >= 0) {\r\n      return 'Good';\r\n    } else {\r\n      return undefined;\r\n    }\r\n}\r\n  \r\n  \r\nexport function getAQIMessage(aqi) \r\n{\r\n    if (aqi >= 401) {\r\n      return '>401: Health alert: everyone may experience more serious health effects';\r\n    } else if (aqi >= 301) {\r\n      return '301-400: Health alert: everyone may experience more serious health effects';\r\n    } else if (aqi >= 201) {\r\n      return '201-300: Health warnings of emergency conditions. The entire population is more likely to be affected. ';\r\n    } else if (aqi >= 151) {\r\n      return '151-200: Everyone may begin to experience health effects; members of sensitive groups may experience more serious health effects.';\r\n    } else if (aqi >= 101) {\r\n      return '101-150: Members of sensitive groups may experience health effects. The general public is not likely to be affected.';\r\n    } else if (aqi >= 51) {\r\n      return '51-100: Air quality is acceptable; however, for some pollutants there may be a moderate health concern for a very small number of people who are unusually sensitive to air pollution.';\r\n    } else if (aqi >= 0) {\r\n      return '0-50: Air quality is considered satisfactory, and air pollution poses little or no risk';\r\n    } else {\r\n      return undefined;\r\n    }\r\n}","import { Disclosure } from '@headlessui/react';\r\nimport { Icon } from '@iconify/react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst navigation = [\r\n  { name: 'Home', href: '/', current: false },\r\n  { name: 'Map', href: '/Map', current: false },\r\n  { name: 'Dashboard', href: '/Dashboard', current: false }\r\n];\r\n\r\nfunction classNames(...classes) {\r\n  return classes.filter(Boolean).join(' ');\r\n}\r\n\r\nfunction NavBar() {\r\n  return (\r\n    <Disclosure as='nav' className='bg-gray-800'>\r\n      {({ open }) => (\r\n        <>\r\n          <div className='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8'>\r\n            <div className='flex items-center justify-between h-16'>\r\n              <div className='flex items-center'>\r\n                <div className='flex-shrink-0'>\r\n                  <img\r\n                    className='h-10 w-38'\r\n                    src='https://schools.pgcps.org/williamschmidt/images/schmidt-header-dark.png'\r\n                    alt='Workflow'\r\n                  />\r\n                </div>\r\n                <div className='hidden md:block'>\r\n                  <div className='ml-10 flex items-baseline space-x-4'>\r\n                    {navigation.map((item) => (\r\n                      <Link\r\n                        to={item.href}\r\n                        className={classNames(\r\n                          item.current\r\n                            ? 'bg-gray-900 text-white'\r\n                            : 'text-gray-300 hover:bg-gray-700 hover:text-white',\r\n                          'px-3 py-2 rounded-md text-sm font-medium'\r\n                        )}\r\n                      >\r\n                        {item.name}\r\n                      </Link>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='hidden md:block'>\r\n                <div className='ml-4 flex items-center md:ml-6'>\r\n                  <button\r\n                    type='button'\r\n                    className='bg-gray-800 p-1 rounded-full text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white'\r\n                  >\r\n                    <span className='sr-only'>View notifications</span>\r\n                    <Icon\r\n                      icon='heroicons-outline:bell'\r\n                      className='h-6 w-6'\r\n                      aria-hidden='true'\r\n                    />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div className='-mr-2 flex md:hidden'>\r\n                {/* Mobile menu button */}\r\n                <Disclosure.Button className='bg-gray-800 inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white'>\r\n                  <span className='sr-only'>Open main menu</span>\r\n                  {open ? (\r\n                    <Icon\r\n                      icon='heroicons-outline:x'\r\n                      className='block h-6 w-6'\r\n                      aria-hidden='true'\r\n                    />\r\n                  ) : (\r\n                    <Icon\r\n                      icon='heroicons-outline:menu'\r\n                      className='block h-6 w-6'\r\n                      aria-hidden='true'\r\n                    />\r\n                  )}\r\n                </Disclosure.Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <Disclosure.Panel className='md:hidden'>\r\n            <div className='px-2 pt-2 pb-3 space-y-1 sm:px-3'>\r\n              {navigation.map((item) => (\r\n                <Disclosure.Button\r\n                  key={item.name}\r\n                  as='a'\r\n                  href={item.href}\r\n                  className={classNames(\r\n                    item.current\r\n                      ? 'bg-gray-900 text-white'\r\n                      : 'text-gray-300 hover:bg-gray-700 hover:text-white',\r\n                    'block px-3 py-2 rounded-md text-base font-medium'\r\n                  )}\r\n                  aria-current={item.current ? 'page' : undefined}\r\n                >\r\n                  {item.name}\r\n                </Disclosure.Button>\r\n              ))}\r\n            </div>\r\n            <div className='pt-4 pb-3 border-t border-gray-700'>\r\n              <div className='flex items-center px-5'>\r\n                <button\r\n                  type='button'\r\n                  className='ml-auto bg-gray-800 flex-shrink-0 p-1 rounded-full text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white'\r\n                >\r\n                  <span className='sr-only'>View notifications</span>\r\n                  <Icon\r\n                    icon='heroicons-outline:bell'\r\n                    className='h-6 w-6'\r\n                    aria-hidden='true'\r\n                  />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </Disclosure.Panel>\r\n        </>\r\n      )}\r\n    </Disclosure>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import { Fragment } from 'react'\r\nimport { AnnotationIcon, GlobeAltIcon, LightningBoltIcon, ScaleIcon } from '@heroicons/react/outline'\r\nconst features = [\r\n  {\r\n    name: 'Connected to the Purple Air Network',\r\n    description:\r\n      'Our project displays the air quality within PG County, geared towards students and faculty alike.',\r\n    icon: GlobeAltIcon,\r\n  },\r\n  {\r\n    name: 'Compare Locations',\r\n    description:\r\n      'This website will have the ability to compare and contrast different regions in the county.',\r\n    icon: ScaleIcon,\r\n  },\r\n  {\r\n    name: 'Live Air Quality Data',\r\n    description:\r\n      'Our site utilizes the data found from https://map.purpleair.com/ , updated in real time for transparent use.',\r\n    icon: LightningBoltIcon,\r\n  },\r\n  {\r\n    name: 'Mobile notifications',\r\n    description:\r\n      'This runs for both desktop and mobile applications!',\r\n    icon: AnnotationIcon,\r\n  },\r\n]\r\nfunction Home() {\r\n  return (\r\n      <>\r\n        <main>\r\n          <div className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\r\n            <div className=\"py-12 bg-white\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"lg:text-center\">\r\n          <h2 className=\"text-base text-indigo-600 font-semibold tracking-wide uppercase\">Air Quality</h2>\r\n          <p className=\"mt-2 text-3xl leading-8 font-extrabold tracking-tight text-gray-900 sm:text-4xl\">\r\n            Schmidt Center Dashboard\r\n          </p>\r\n          <p className=\"mt-4 max-w-2xl text-xl text-gray-500 lg:mx-auto\">\r\n            Schmidt Center Dashboard currently being developed by Shiv Patel, Antoine Vignon, Arko Mazumder, and Theodore Tasker.\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"mt-10\">\r\n          <dl className=\"space-y-10 md:space-y-0 md:grid md:grid-cols-2 md:gap-x-8 md:gap-y-10\">\r\n            {features.map((feature) => (\r\n              <div key={feature.name} className=\"relative\">\r\n                <dt>\r\n                  <div className=\"absolute flex items-center justify-center h-12 w-12 rounded-md bg-indigo-500 text-white\">\r\n                    <feature.icon className=\"h-6 w-6\" aria-hidden=\"true\" />\r\n                  </div>\r\n                  <p className=\"ml-16 text-lg leading-6 font-medium text-gray-900\">{feature.name}</p>\r\n                </dt>\r\n                <dd className=\"mt-2 ml-16 text-base text-gray-500\">{feature.description}</dd>\r\n              </div>\r\n            ))}\r\n          </dl>\r\n        </div>\r\n      </div>\r\n    </div>\r\n          </div>\r\n        </main>\r\n      </>\r\n  )\r\n}\r\n\r\nexport default Home;","function aqiGradeRGB(current) {\r\n  if (current === undefined) {\r\n    return 'No-Data';\r\n  } else if (current >= 0 && current <= 50) {\r\n    return 'Satisfactory';\r\n  } else if (current > 50 && current <= 100) {\r\n    return 'Acceptable';\r\n  } else if (current > 100 && current <= 150) {\r\n    return 'Poor';\r\n  } else if (current > 150 && current <= 200) {\r\n    return 'Very-Poor';\r\n  } else if (current > 200 && current <= 300) {\r\n    return 'Health-Alert';\r\n  } else if (current > 300) {\r\n    return 'Health-Warning';\r\n  }\r\n}\r\n\r\nexport default aqiGradeRGB;\r\n","import {\r\n  MapContainer,\r\n  TileLayer,\r\n  Marker,\r\n  Popup,\r\n  useMapEvents,\r\n  LayersControl,\r\n  FeatureGroup\r\n} from 'react-leaflet';\r\nimport aqiGradeRGB from '../helpers/AQI';\r\nimport './aqi.css';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nvar all_sensors;\r\n//import { data } from './displayChart';\r\n\r\n//https://api.thingspeak.com/channels/1344510/feeds.json?api_key=VJ570KKB1RMDD6NU\r\n\r\nfunction calcAvgAQI(sensors) {\r\n  let sum = 0;\r\n  for (const sensorID in sensors) {\r\n    if (sensors.hasOwnProperty(sensorID)) {\r\n      let sensor = sensors[sensorID];\r\n      sum += sensor.AQI;\r\n    }\r\n  }\r\n \r\n  let avg = Math.round(sum / (Object.keys(sensors).length));\r\n  return avg;\r\n}\r\n\r\nfunction showLabelMap(sensorData) {\r\n  const dataArray = [];\r\n  for (const sensorKey in sensorData) {\r\n    if (sensorData.hasOwnProperty(sensorKey)) {\r\n      let sensor = sensorData[sensorKey];\r\n      dataArray.push(\r\n        <Marker\r\n          position={[sensor.Latitude, sensor.Longitude]}\r\n          key={sensorKey}\r\n        >\r\n          <Popup>\r\n            <div\r\n              className='container mx-auto p-2 text-center rounded-md'\r\n              id={aqiGradeRGB(sensor.AQI)}\r\n              key={sensorKey}\r\n            >\r\n              <h1 className='font-sans font-bold '>Label: {sensor.Label}</h1>\r\n              <h1 className='font-sans font-bold '>Sensor ID: {sensorKey}</h1>\r\n              <h1 className='font-sans font-bold'>AQI: {sensor.AQI}</h1>\r\n              <h1 className='font-sans font-bold p-1'>\r\n                AQI Description: {sensor.AQIDescription}\r\n              </h1>\r\n              <p className='font-sans p-1'>{sensor.AQIMessage}</p>\r\n            </div>\r\n          </Popup>\r\n        </Marker>\r\n      );\r\n\r\n    }\r\n\r\n  }\r\n\r\n  return dataArray;\r\n\r\n}\r\n\r\nfunction MapView() {\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [sensors, setSensorData] = useState({\r\n    allSensors: null,\r\n    north: null,\r\n    central: null,\r\n    inner: null,\r\n    south: null,\r\n    rural: null\r\n  });\r\n  const center = [38.906334, -76.882176];\r\n  // const centralCounty = [38.8275, -76.751111];\r\n  // const northCounty = [39.019989, -76.879418];\r\n  // const innerBeltway = [38.85944, -76.889167];\r\n  // const southCounty = [38.810556, -76.946389];\r\n  // const rural = [38.698611, -76.849167];\r\n  useEffect(() => {\r\n    const fetchData1 = async () => {\r\n      try {\r\n        let data = await fetch('/.netlify/functions/processed');\r\n        data = await data.json();\r\n        setSensorData({\r\n          allSensors: data.schmidtSensorsData,\r\n          north: data.northCountySensorsData,\r\n          central: data.centralCountySensorsData,\r\n          inner: data.innerBeltwaySensorsData,\r\n          south: data.southCountySensorsData,\r\n          rural: data.ruralTierSensorsData\r\n        });\r\n        all_sensors = data.schmidtSensorsData;\r\n        setIsLoaded(true);\r\n      } catch (err) { \r\n        setError(true);\r\n      } \r\n    };\r\n    fetchData1();\r\n  }, []);\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (!isLoaded) {\r\n    return <div>Loading...</div>;\r\n  } else {\r\n    const northCountySensorsMarkers = [...showLabelMap(sensors.north)];\r\n    const centralCountySensorsMarkers = [...showLabelMap(sensors.central)];\r\n    const innerBeltwaySensorsMarkers = [...showLabelMap(sensors.inner)];\r\n    const southCountySensorsMarkers = [...showLabelMap(sensors.south)];\r\n    const ruralTierSensorsMarkers = [...showLabelMap(sensors.rural)];\r\n    const avg = calcAvgAQI(all_sensors);\r\n    return (\r\n      <><><div className='absolute top-40 right-44 w-1/6'>\r\n        <div>\r\n          <p className='text-2xl text-gray-600'><span className='font-bold'>County AQI: </span>{avg}</p>\r\n        </div>\r\n        <div\r\n          className='mt-3 py-4 rounded-md text-center'\r\n          id={aqiGradeRGB(avg)}\r\n        >\r\n          <h2>\r\n            {aqiGradeRGB(avg)}\r\n          </h2>\r\n        </div>\r\n        <div className='flex'>\r\n          <div className='py-1 font-medium'>0</div>\r\n          <div>\r\n            <img\r\n              src='/arrow.jpg'\r\n              alt='Double Sided Arrow' />\r\n          </div>\r\n          <div className='py-1 font-medium'>50</div>\r\n        </div>\r\n      </div></><><MapContainer center={center} zoom={10} scrollWheelZoom={true}>\r\n          <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png' />\r\n          <LayersControl position='topright'>\r\n            <LayersControl.Overlay checked name='North'>\r\n              <FeatureGroup>{northCountySensorsMarkers}</FeatureGroup>\r\n            </LayersControl.Overlay>\r\n            <LayersControl.Overlay checked name='Central'>\r\n              <FeatureGroup>{centralCountySensorsMarkers}</FeatureGroup>\r\n            </LayersControl.Overlay>\r\n            <LayersControl.Overlay checked name='Rural'>\r\n              <FeatureGroup>{ruralTierSensorsMarkers}</FeatureGroup>\r\n            </LayersControl.Overlay>\r\n            <LayersControl.Overlay checked name='Inner'>\r\n              <FeatureGroup>{innerBeltwaySensorsMarkers}</FeatureGroup>\r\n            </LayersControl.Overlay>\r\n            <LayersControl.Overlay checked name='South'>\r\n              <FeatureGroup>{southCountySensorsMarkers}</FeatureGroup>\r\n            </LayersControl.Overlay>\r\n          </LayersControl>\r\n        </MapContainer></></>\r\n    );\r\n  }\r\n}\r\n\r\n/*function AQIView() {\r\n  let avg = 0;\r\n  const [sensors, setSensorData] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setSensorData(all_sensors);\r\n    console.log('TestingBBBB', all_sensors);\r\n    setIsLoaded(true);\r\n    //avg = calcAvgAQI(sensors);\r\n  }, [])\r\n   if (!isLoaded) {\r\n    return <div>Loading...</div>;\r\n  } else {\r\n    return (\r\n      <>\r\n        <div className='flex-col'>\r\n          <div>\r\n            <p className='text-2xl text-gray-600'><span className='font-bold'>County AQI: </span>{avg}</p>\r\n          </div>\r\n          <div\r\n            className='mt-3 py-4 rounded-md text-center'\r\n            id={aqiGradeRGB(avg)}\r\n          >\r\n            <h2>\r\n              <stong>{aqiGradeRGB(avg)}</stong>\r\n            </h2>\r\n          </div>\r\n          <div className='flex'>\r\n           <div className='py-1 font-medium'>0</div>\r\n            <div>\r\n              <img\r\n                src='/arrow.jpg'\r\n                alt='Double Sided Arrow' \r\n              />\r\n            </div>\r\n            <div className='py-1 font-medium'>50</div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}*/\r\n\r\nexport default MapView;","import React, { useState, useEffect } from 'react';\r\nimport '../index.css';\r\n\r\nfunction WeatherWidget() {\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [resObj, setResObj] = useState({});\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      'https://api.openweathermap.org/data/2.5/weather?lat=38&lon=-76&units=imperial&appid=9cf81dbd01ad9692bf2dcd8da6af1deb'\r\n    )\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          setResObj(result);\r\n          setIsLoaded(true);\r\n        },\r\n\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      );\r\n  }, []);\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (!isLoaded) {\r\n    return <div>Loading...</div>;\r\n  } else {\r\n    return (\r\n      <div>\r\n        <div className='shadow-inner opacity-100 p-2 font-medium text-gray-700'>\r\n          <h2>Prince George's County, MD</h2>\r\n          <div>\r\n            {/* {console.log(JSON.stringify(resObj))} */}\r\n            <p>\r\n              {resObj.main.temp} ºF, feels like: {resObj.main.feels_like}\r\n            </p>\r\n            <p>\r\n              {resObj.weather[0].description.charAt(0).toUpperCase() +\r\n                resObj.weather[0].description.slice(1)}\r\n            </p>\r\n            <p>Wind: {resObj.wind.speed} MPH</p>\r\n            <p>Humidity: {resObj.main.humidity}%</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherWidget;\r\n","import MapView from '../components/MapView.js';\r\nimport { Fragment } from 'react';\r\nimport WeatherWidget from '../components/Weather-Widget.js';\r\n\r\nfunction Map() {\r\n  return ( \r\n    <>\r\n      <header className='bg-white shadow'>\r\n      <h1 className='text-3xl font-bold text-gray-600 max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8'>Air Quality Map</h1>   \r\n      </header>\r\n      <main>\r\n        <div className='max-w-7xl mx-auto py-6 sm:px-6 lg:px-8 flex'>\r\n          {/* Map Column*/}\r\n          <div className='px-4 sm:px-0 w-3/4'>\r\n            <MapView />\r\n          </div>\r\n          {/* Filters Column */}\r\n          <div className='px-6 w-1/4 py-36'>\r\n            <div>\r\n              <WeatherWidget  />\r\n            </div>\r\n          </div>\r\n          {/* /End replace */}\r\n        </div>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Map;","import { useState } from 'react';\r\nimport { render } from 'react-dom';\r\n\r\nconst displayChart = require('./displayChart');\r\n\r\nexport function HandleInputForm() {\r\n  // const canvasObj = canvasRef.current;\r\n  // const ctx = canvasObj.getContext('2d');\r\n  const [inputs, setInputs] = useState({\r\n    sensorid: '',\r\n    startdate: '',\r\n    enddate: '',\r\n    temperature: false,\r\n    aqi: false,\r\n    humidity: false,\r\n    pm_1: false,\r\n    pm_25: false,\r\n    pm_10: false\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    setInputs((oldValues) => ({\r\n      ...oldValues,\r\n      [e.target.name]: e.target.value\r\n    }));\r\n  };\r\n\r\n  const handleCheckboxChange = (e) => {\r\n    setInputs((oldValues) => ({\r\n      ...oldValues,\r\n      [e.target.name]: e.target.checked\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    alert('This was submitted: ' + JSON.stringify(inputs));\r\n    const rootElement = document.getElementById('chart-display');\r\n    const Display = () => displayChart.ShowChart(inputs);\r\n    render(<Display />, rootElement);\r\n    //displayChart.showChart(inputs.sensorid, inputs.startdate, inputs.enddate);\r\n    //getRequestedData(inputs.sensorid, inputs.startdate, inputs.enddate);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <form\r\n          onSubmit={handleSubmit}\r\n          className='user-inputs'\r\n          method='post'\r\n          name='user-input'\r\n        >\r\n          <h2>\r\n            <b>Enter sensor ID and date range:</b>\r\n          </h2>\r\n          <div className='user-input'>\r\n            <label htmlFor='sensor-id'> Sensor ID: </label>\r\n            <input\r\n              type='number'\r\n              id='sensor-id'\r\n              name='sensorid'\r\n              placeholder='Sensor ID'\r\n              value={inputs.sensorid}\r\n              onChange={handleChange}\r\n              required\r\n            ></input>\r\n          </div>\r\n          <div className='user-input'>\r\n            <label htmlFor='start-date'> Start Date: </label>\r\n            <input\r\n              type='date'\r\n              id='start-date'\r\n              name='startdate'\r\n              value={inputs.startdate}\r\n              onChange={handleChange}\r\n              required\r\n            ></input>\r\n          </div>\r\n          <div className='user-input'>\r\n            <label htmlFor='end-date'> End Date: </label>\r\n            <input\r\n              type='date'\r\n              id='end-date'\r\n              name='enddate'\r\n              value={inputs.enddate}\r\n              onChange={handleChange}\r\n              required\r\n            ></input>\r\n          </div>\r\n          <h2>\r\n            <b>Choose a feature to compare:</b>\r\n          </h2>\r\n          <p>(Default: Temperature and AQI)</p>\r\n          <div className='user-input'>\r\n            <input\r\n              type='checkbox'\r\n              id='temperature'\r\n              name='temperature'\r\n              value={inputs.temperature}\r\n              onChange={handleCheckboxChange}\r\n            ></input>\r\n            <label htmlFor='temperature'>Temperature</label>\r\n          </div>\r\n          <div className='user-input'>\r\n            <input\r\n              type='checkbox'\r\n              id='humidity'\r\n              name='humidity'\r\n              value={inputs.humidity}\r\n              onChange={handleCheckboxChange}\r\n            ></input>\r\n            <label htmlFor='humidity'>Humidity</label>\r\n          </div>\r\n          <div className='user-input'>\r\n            <input\r\n              type='checkbox'\r\n              id='aqi'\r\n              name='aqi'\r\n              value={inputs.aqi}\r\n              onChange={handleCheckboxChange}\r\n            ></input>\r\n            <label htmlFor='AQI'>AQI (Air Quality Index)</label>\r\n          </div>\r\n          <div className='user-input'>\r\n            <input\r\n              type='checkbox'\r\n              id='pm_1'\r\n              name='pm_1'\r\n              value={inputs.pm_1}\r\n              onChange={handleCheckboxChange}\r\n            ></input>\r\n            <label htmlFor='pm_1_0'>\r\n              PM_1.0 (Atmospheric Particulate Matter: 1.0 micrometers or less)\r\n            </label>\r\n          </div>\r\n          <div className='user-input'>\r\n            <input\r\n              type='checkbox'\r\n              id='pm_25'\r\n              name='pm_25'\r\n              value={inputs.pm_25}\r\n              onChange={handleCheckboxChange}\r\n            ></input>\r\n            <label htmlFor='pm_2_5'>\r\n              PM_2.5 (Atmospheric Particulate Matter: 2.5 micrometers or less)\r\n            </label>\r\n          </div>\r\n          <div className='user-input'>\r\n            <input\r\n              type='checkbox'\r\n              id='pm_10'\r\n              name='pm_10'\r\n              value={inputs.pm_10}\r\n              onChange={handleCheckboxChange}\r\n            ></input>\r\n            <label htmlFor='pm_10_0'>\r\n              PM_10.0 (Atmospheric Particulate Matter: 10 micrometers or less)\r\n            </label>\r\n          </div>\r\n\r\n          <div className='user-input'>\r\n            <input type='submit' value='Submit' id='submit'></input>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <div className='chart-display' id='chart-display'></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HandleInputForm;\r\n","import { Fragment } from 'react';\r\nimport HandleInputForm from '../components/dashboard';\r\n//import DisplayOnSubmit from '../helpers/drawCanvas.js';\r\nfunction DashBoard() {\r\n  return (\r\n       <>\r\n        <header className=\"bg-white shadow\">\r\n          <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\r\n            <h1 className=\"text-3xl font-bold text-gray-600\">Dashboard</h1>\r\n          </div>\r\n        </header>\r\n        <main>\r\n          <div className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\r\n            {/* Replace with your content */}\r\n            <div className=\"px-4 py-6 sm:px-0\">\r\n              <div className=\"border-4 border-dashed border-gray-200 rounded-lg\">\r\n                \r\n               </div>\r\n            </div>\r\n            {/* /End replace */}\r\n          </div>\r\n          <HandleInputForm />\r\n        </main>\r\n    </>\r\n  )\r\n}\r\nexport default DashBoard;","import './App.css';\r\nimport NavBar from './components/NavBar.js';\r\nimport Home from './pages/Home.js';\r\nimport Map from './pages/Map.js';\r\nimport DashBoard from './pages/DashBoard.js';\r\nimport React from 'react';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  //Link,\r\n  Routes\r\n} from 'react-router-dom';\r\n\r\nexport default function App() {\r\n  return (\r\n    <Router>\r\n      <div className='min-h-full'>\r\n        <NavBar />\r\n        <Routes>\r\n          <Route path='/' element={<Home />} />\r\n          <Route path='/Map' element={<Map />} />\r\n          <Route path='/DashBoard' element={<DashBoard />} />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}